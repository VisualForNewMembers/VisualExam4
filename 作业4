u8 table_data[9];//提前定义一个数组存放接收到的数据
u8 table_cp[9];//额外定义一个数组，将接收到的数据复制到这里面
u16 count=0;//接收数据计数
u8 ch;//存放电脑接收到的数据
USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启中断
void USART1_IRQHandler() 
{
	u8 ucTemp;
	if(USART_GetFlagStatus(USART1,USART_IT_RXNE)!=RESET)
	{
		ucTemp=USART_ReceiveData(USART1);
		USART_SendData(USART1, ucTemp);
	}
}

void USART1_IRQHandler(void)                	//串口1中断服务程序
{
		u8 Res,i;
		if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断
		{
			Res =USART_ReceiveData(USART1);//(USART1->DR);	//读取接收到的数据
			
			if(count==0)//如果是接收的第一个数据
			{
				table_data[count]=Res;//将第一个数据存到数据中第一元素
				if(table_data[0]==0xa7)//判断接收的第一个数据是不是十六进制0Xa7
				  count++;//如果第一个数据是0Xa7则表示正确计数+1
			}
			else if(count==1)//第一个数据接收正确的情况下，判断第二个数据
			{
				if(Res==0xa7)//如果刚接收的数据是0xa7则表示数据正确
				{
					table_data[count]=Res;//将数据储存到数组第二个元素位置
					count++;//接收数据计数+1
				}
				else//如果第二个字符不是0Xa7则计数清零，重新接收
					count=0;
			}
			else if(count==2&&Res==0)//如果前两个数据正确，接收的第三个数据是0，则清零计数，重新接收数据
			{
				count=0;
			}
			else if(count>1&&count<9)//这是可以接收数据的范围，只要count在数据可接收数据范围内即可进行存入数据
			{
				table_data[count]=Res;
				count++;
			}
			else if(count>=9)//如果接收数据超过数组大小，则清零重新接收
			{
				count=0;
			}		
       } 
	 
		memset(table_cp, 0, sizeof(table_data));//在使用数组table_cp时清空
		for(i=0;i<9;i++)//把接收到的数据复制到table_cp数组中
		{
			 table_cp[i]= table_data[i];
	}
	printf("%d",count);
	for(i=0;i<9;i++)
    printf("%s",table_cp[i]);
} 
